# ARM64 ILP32 SPEC config file
#

%ifndef %{label}
% define label "ilp32-test"
%endif

%ifndef %{bits}
% define  bits 64
%endif

%ifndef %{build_ncpus}
% define build_ncpus 8
%endif

%define os LINUX

%if %{bits} == 64
% define model -mabi=lp64
%elif %{bits} == 32
% define model -mabi=ilp32
%else
% error Please define number of bits - see instructions in config file
%endif

command_add_redirect = 1
flagsurl             = $[top]/config/flags/gcc.xml
ignore_errors        = 1
iterations           = 1
label                = %{label}-%{bits}
line_width           = 1020
log_line_width       = 1020
makeflags            = --jobs=%{build_ncpus}
mean_anyway          = 1
output_format        = txt,html,cfg,pdf,csv
preenv               = 1
reportable           = 0
tune                 = base

intrate,fprate:
   copies           = 1
intspeed,fpspeed:
   threads          = 8

default:
%ifndef %{gcc_dir}
% define gcc_dir "/opt/ilp32"
%endif

%if %{bits} == 32
   preENV_LIBRARY_PATH     = %{gcc_dir}/usr/libilp32
   preENV_LD_LIBRARY_PATH  = %{gcc_dir}/libilp32:%{gcc_dir}/lib
   #preENV_LD_LIBRARY_PATH  = %{gcc_dir}/libilp32:%{gcc_dir}/lib:%{ENV_LD_LIBRARY_PATH}
% define gcc_ops -Wl,--dynamic-linker=%{gcc_dir}/lib/ld-linux-aarch64_ilp32.so.1 -Wl,--rpath=%{gcc_dir}/libilp32
%else
   preENV_LIBRARY_PATH     = %{gcc_dir}/usr/lib64
   preENV_LD_LIBRARY_PATH  = %{gcc_dir}/lib64:%{gcc_dir}/lib
   #preENV_LD_LIBRARY_PATH  = %{gcc_dir}/lib64:%{gcc_dir}/lib:%{ENV_LD_LIBRARY_PATH}
% define gcc_ops -Wl,--dynamic-linker=%{gcc_dir}/lib/ld-linux-aarch64.so.1 -Wl,--rpath=%{gcc_dir}/lib64
%endif

   SPECLANG                = %{gcc_dir}/bin/
   CC                      = $(SPECLANG)aarch64-linux-gnu-gcc -std=c99 %{model} %{gcc_ops} -Wl,--verbose
   CXX                     = $(SPECLANG)aarch64-linux-gnu-g++ -std=c++03 %{model} %{gcc_ops} -Wl,--verbose
   FC                      = NA
   # How to say "Show me your version, please"
   CC_VERSION_OPTION       = -v
   CXX_VERSION_OPTION      = -v
   FC_VERSION_OPTION       = -v

default:
%if %{bits} == 64
   sw_base_ptrsize = 64-bit
   sw_peak_ptrsize = Not Applicable
%else
   sw_base_ptrsize = 32-bit
   sw_peak_ptrsize = Not Applicable
%endif


default:
%if %{bits} == 32
    EXTRA_PORTABILITY = -D_FILE_OFFSET_BITS=64
%else
    EXTRA_PORTABILITY = -DSPEC_LP64
%endif

# Benchmark-specific portability (ordered by last 2 digits of bmark number)

500.perlbench_r,600.perlbench_s:  #lang='C'
%if %{bits} == 32
% define suffix AARCH32
%else
% define suffix AARCH64
%endif
   PORTABILITY    = -DSPEC_%{os}_%{suffix}

521.wrf_r,621.wrf_s:  #lang='F,C'
   CPORTABILITY  = -DSPEC_CASE_FLAG
   FPORTABILITY  = -fconvert=big-endian

523.xalancbmk_r,623.xalancbmk_s:  #lang='CXX'
   PORTABILITY   = -DSPEC_%{os}

526.blender_r:  #lang='CXX,C'
   PORTABILITY   = -funsigned-char -DSPEC_LINUX

527.cam4_r,627.cam4_s:  #lang='F,C'
   PORTABILITY   = -DSPEC_CASE_FLAG

628.pop2_s:  #lang='F,C'
   PORTABILITY   = -DSPEC_CASE_FLAG -fconvert=big-endian


%if %{bits} == 32
   intspeed,fpspeed:
   #
   # Many of the speed benchmarks (6nn.benchmark_s) do not fit in 32 bits
   # If you wish to run SPECint2017_speed or SPECfp2017_speed, please use
   #
   #     runcpu --define bits=64
   #
   fail_build = 1
%else
   intspeed,fpspeed:
      EXTRA_OPTIMIZE = -fopenmp -DSPEC_OPENMP
   fpspeed:
      #
      # 627.cam4 needs a big stack; the preENV will apply it to all
      # benchmarks in the set, as required by the rules.
      #
      preENV_OMP_STACKSIZE = 120M
%endif

default=base:         # flags for all base
   OPTIMIZE         = -g -O3

intrate,intspeed=base: # flags for integer base
    EXTRA_COPTIMIZE = -fno-strict-aliasing -fgnu89-inline

default:
   basepeak = yes
default=peak:

default:
   sw_compiler001   = "ilp32 Compiler"

intrate,intspeed,fprate,fpspeed:
   hw_vendor          = NA
   tester             = NA
   test_sponsor       = NA
   license_num        = NA


intrate,intspeed,fprate,fpspeed:
   hw_avail           = 
   sw_avail           = 

intrate,intspeed,fprate,fpspeed:
 # hw_cpu_name        = 
   hw_cpu_nominal_mhz = 
   hw_cpu_max_mhz     = 
 # hw_disk            = 
   hw_model           = 
 # hw_nchips          = 
   hw_ncores          = 
   hw_ncpuorder       = 
   hw_nthreadspercore = 
   hw_other           = 

#  hw_memory001       = 
#  hw_memory002       = 

   hw_pcache          = 
   hw_scache          = 
   hw_tcache          = 
   hw_ocache          = 

   fw_bios            = 
 # sw_file            = 
 # sw_os001           = 
 # sw_os002           = 
   sw_other           = 
 # sw_state           = 
