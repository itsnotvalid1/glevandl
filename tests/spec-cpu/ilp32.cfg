# ARM64 ILP32 SPEC config file
#

%if !defined(%{toolchain_prefix})
% define toolchain_prefix "/opt/ilp32"
%endif

%if !defined(%{abi})
% error Undefined abi.  Use '--define abi=lp64' or '--define abi=ilp32'.
%endif

%if %{abi} eq "lp64"
	sw_base_ptrsize = 64-bit
	sw_peak_ptrsize = Not Applicable
	EXTRA_PORTABILITY = -DSPEC_LP64
	preENV_LIBRARY_PATH     = %{toolchain_prefix}/usr/lib64
	preENV_LD_LIBRARY_PATH  = %{toolchain_prefix}/lib64:%{toolchain_prefix}/lib
	#preENV_LD_LIBRARY_PATH  = %{toolchain_prefix}/lib64:%{toolchain_prefix}/lib:%{ENV_LD_LIBRARY_PATH}
% define gcc_opts -mabi=lp64 -Wl,--verbose -Wl,--dynamic-linker=%{toolchain_prefix}/lib/ld-linux-aarch64.so.1 -Wl,--rpath=%{toolchain_prefix}/lib64
%elif %{abi} eq "ilp32"
	sw_base_ptrsize = 32-bit
	sw_peak_ptrsize = Not Applicable
	EXTRA_PORTABILITY = -D_FILE_OFFSET_BITS=64
	preENV_LIBRARY_PATH     = %{toolchain_prefix}/usr/libilp32
	preENV_LD_LIBRARY_PATH  = %{toolchain_prefix}/libilp32:%{toolchain_prefix}/lib
	#preENV_LD_LIBRARY_PATH  = %{toolchain_prefix}/libilp32:%{toolchain_prefix}/lib:%{ENV_LD_LIBRARY_PATH}
% define gcc_opts -mabi=ilp32 -Wl,--verbose -Wl,--dynamic-linker=%{toolchain_prefix}/lib/ld-linux-aarch64_ilp32.so.1 -Wl,--rpath=%{toolchain_prefix}/libilp32
%else
%	error Unknown abi.  Use '--define abi=lp64' or '--define abi=ilp32'.
%endif

%if !defined(%{build_ncpus})
% define build_ncpus 8
%endif

%if !defined(%{label})
% define label "ilp32-test--%{abi}"
%endif

command_add_redirect = 1
flagsurl             = $[top]/config/flags/gcc.xml
ignore_errors        = 1
iterations           = 1
label                = %{label}
line_width           = 1020
log_line_width       = 1020
makeflags            = --jobs=%{build_ncpus}
mean_anyway          = 1
output_format        = txt,html,cfg,pdf,csv
preenv               = 1
reportable           = 0
tune                 = base

intrate,fprate:
   copies           = 1
intspeed,fpspeed:
   threads          = 8

default=base:         # flags for all base
   OPTIMIZE         = -g -O3

CC       = %{toolchain_prefix}/bin/aarch64-linux-gnu-gcc -std=c99 %{gcc_opts}
CXX      = %{toolchain_prefix}/bin/aarch64-linux-gnu-g++ -std=c++03 %{gcc_opts}
FC       = %{toolchain_prefix}/bin/aarch64-linux-gnu-gfortran %{gcc_opts}

# How to say "Show me your version, please"
CC_VERSION_OPTION       = -v
CXX_VERSION_OPTION      = -v
FC_VERSION_OPTION       = -v


# Benchmark-specific portability (ordered by last 2 digits of bmark number)

500.perlbench_r,600.perlbench_s:  #lang='C'
%if %{abi} eq 'lp64'
   PORTABILITY    = -DSPEC_LINUX_AARCH64
%else
   PORTABILITY    = -DSPEC_LINUX_AARCH32
%endif

521.wrf_r,621.wrf_s:  #lang='F,C'
   CPORTABILITY  = -DSPEC_CASE_FLAG
   FPORTABILITY  = -fconvert=big-endian

523.xalancbmk_r,623.xalancbmk_s:  #lang='CXX'
   PORTABILITY   = -DSPEC_LINUX

526.blender_r:  #lang='CXX,C'
   PORTABILITY   = -funsigned-char -DSPEC_LINUX

527.cam4_r,627.cam4_s:  #lang='F,C'
   PORTABILITY   = -DSPEC_CASE_FLAG

628.pop2_s:  #lang='F,C'
   PORTABILITY   = -DSPEC_CASE_FLAG -fconvert=big-endian


%if %{abi} eq 'lp64'
   intspeed:
      EXTRA_OPTIMIZE = -fopenmp -DSPEC_OPENMP
   fpspeed:
      preENV_OMP_STACKSIZE = 120M
%else
   intspeed,fpspeed:
   fail_build = 1
%endif


intrate,intspeed=base: # flags for integer base
    EXTRA_COPTIMIZE = -fno-strict-aliasing -fgnu89-inline

default:
   basepeak = yes
default=peak:

default:
   sw_compiler001   = "ilp32 Compiler"

intrate,intspeed,fprate,fpspeed:
   hw_vendor          = NA
   tester             = NA
   test_sponsor       = NA
   license_num        = NA


intrate,intspeed,fprate,fpspeed:
   hw_avail           = 
   sw_avail           = 

intrate,intspeed,fprate,fpspeed:
 # hw_cpu_name        = 
   hw_cpu_nominal_mhz = 
   hw_cpu_max_mhz     = 
 # hw_disk            = 
   hw_model           = 
 # hw_nchips          = 
   hw_ncores          = 
   hw_ncpuorder       = 
   hw_nthreadspercore = 
   hw_other           = 

#  hw_memory001       = 
#  hw_memory002       = 

   hw_pcache          = 
   hw_scache          = 
   hw_tcache          = 
   hw_ocache          = 

   fw_bios            = 
 # sw_file            = 
 # sw_os001           = 
 # sw_os002           = 
   sw_other           = 
 # sw_state           = 
